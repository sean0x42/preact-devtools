.tree {
	--indent-depth: 1.6rem;

	width: 100%;
	position: relative;
	z-index: 1;
	overflow: auto;
	outline: none;

	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	min-height: 15rem;
	height: 100%;
}

.pane {
	/**
	 * Hack to get the parent to grow with its children, see:
	 * https://stackoverflow.com/questions/17291514/how-to-force-parent-div-to-expand-by-child-div-width-padding-margin-box
	 */
	display: inline-block;
}

.empty {
	display: flex;
	flex: 1;
	justify-content: center;
	align-items: center;
	height: 100%;
	min-height: 15rem;
}

.bgLogo {
	color: var(--color-empty-logo);
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate3d(-50%, -50%, 0);
	z-index: -1;
	opacity: 0.4;
}

.item {
	font-size: 0.9rem;
	font-family: monospace;
	color: var(--color-element-text);
	height: 1.5rem;
}

.tree:focus-within .item[data-selected] {
	background: var(--color-selected-bg);
	color: var(--color-selected-text);
}

.item[data-selected] {
	background: var(--color-selected-inactive-bg);
	color: var(--color-selected-inactive-text);
}

.item:not([data-selected]):hover {
	background: var(--color-hover);
}

.itemHeader {
	display: flex;
	align-items: center;
	height: 100%;
	cursor: default;
	padding: 0 0.25rem;
}

.toggle {
	width: 1.25rem;
	height: 1.25rem;
	background: none;
	border: none;
	outline: none;
	color: #aaa;
	z-index: 100;
	display: inline-flex;
	justify-content: center;
	align-content: center;
	padding: 0.2em 0.13em;
	transform: rotate(0);
	transition: transform 0.3s;
}

[data-collapsed].toggle svg {
	transform: rotate(-90deg);
}

[data-selected] .toggle {
	color: var(--color-selected-text);
}

.noToggle {
	width: 1.25rem;
	height: 1.25rem;
}

.dimmer {
	background: var(--color-dim-bg);
	position: absolute;
	left: 0;
	right: 0;
	pointer-events: none;
	opacity: 0.5;
	z-index: -1;
}

.keyLabel {
	color: var(--color-key-label);
}

[data-selected] .keyLabel {
	color: var(--color-key-label-selected);
}

.key {
	color: var(--color-key-value);
}

[data-selected] .key {
	color: var(--color-key-value-selected);
}

/* Marker */
.mark {
	background: var(--color-marker);
}
.markSelected {
	background: var(--color-marker-selected);
}
